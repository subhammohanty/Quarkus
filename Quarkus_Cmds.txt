To Run Quarkus project:
==========================
run:
-----
mvn quarkus:dev

To delete and regenerate target folder:
---------------------------------------
mvn clean quarkus:dev

To get dependencies/extension list quarkus supports
-----------------------
mvn quarkus:list-extensions

To add dependencies:
-----------------------
mvn quarkus:add-extension -Dextensions="extension name"

Swagger in Quarkus:
--------------------
Add swagger dependency in pom.xml
visit localhost:8080/q/swagger-ui/

->if we want to change the url of swagger then in application.properties file define
quarkus.swagger-ui.path = abc (/q is mandatory)

-> If we want to disable swagger then in application.properties file define
quarkus.swagger-ui-always-include=false


To call other downstream:
--------------------------
Add RestEasy Classic EndPoint in pom.xml

Create an interface with @Path and @RegisterRestClient(baseUri = "https://api.tvmaze.com")
Create methods for accessing those endpoints 
	for example :    
 //https://api.tvmaze.com/shows/169
    @GET
    @Path("shows/{id}")
    TvSeries getTvSeriesById(@PathParam("id") int id);
	
	
	
To Use Application.yaml file in Quarkus:
-------------------------------------------
-> Add quarkus-config-yaml dependency in your pom.xml

Profiling:(1st Way)
---------
define the properties like below
%local.quarkus.http.port=9090 - This indicates local profile

To run in local profile, we should use below command
mvn -Dquarkus-profile=local compile quarkus:dev

Profiling:(2st Way)
-------------------
Create a new file with profile (application-uat.properties)

add all those properties as it is 
Then run below command
mvn -Dquarkus-profile=uat compile quarkus:dev
-----------------------------
To Enable Debug Logs:
-----------------------
quarkus.log.level=DEBUG

To Enable our Debug Logs only (Package wise):
------------------
quarkus.log.level=INFO
quarkus.log.category."com.hprtech".level=DEBUG

To Disable logs from Console:
-----------------------------
quarkus.log.console..enable=false

To Disable Quarkus Banner:
----------------------------
quarkus.banner.enabled=false

To Save logs in file:(To Save DEBUG logs in a file in mentioned location)
-------------------
quarkus.log.file.enable=true
quarkus.log.file.level=DEBUG
quarkus.log.file.path=log/quarkus.log

quarkus.log.file.format=%d(HH:mm:ss) %-5p [%c{2.}] (%t) %s%e%n

**Note: 5 backup log files will be created  

----------------------
quarkus.http.access-log.enabled=true (To log all the HTTP Request)

To Print log in JSON format:
----------------------------
Add quarkus-logging-json dependency to your pom.xml

Initialization of Quarkus Application:
--------------------------------
-> @QuarkusMain : from where we will start our execution
> 
================================
To check Health:
---------------
-> Add dependency of quarkus-smallrye-health
-> Create 2 class of Liveness and Readiness and annotate with @liveness and @Readiness and implement from HealthCheck
-> Override call method and write logic to check connection
-> Use http://localhost:8080/q/health to check the status and http://localhost:8080/q/health-ui to check in UI


To Check Load:
---------------
-> Add dependency of quarkus-smallrye-metrics
-> Annotate Method with @Counted, @Timed, @Metered and a new method @Gauge
-> Visit http://localhost:8080/q/metrics/application for all the details

To Implement JWT:
------------------
-> Create 2 modules as jwt-token and courses.
-> using git generate public and private key inside a new jwt folder
-> Add jwt dependency in course modules
-> Add jwt and jwt-build dependency in jwt-token module.
-> add properties for both jwt-token and courses modules to run on diff port and to access private and public key.

To implement Keycloak:
-------------------------
-> Download Keyklock and go inside bin folder
-> execute command kc.bat start-dev
-> create username and password as admin and admin
-> open adminstrative console
-> A Realm contains Client, Users and Roles.
-> We can define roles on Realm level or Client Level
-> Don't modify anything in realm master
-> Create your own Realm (eg iit)
-> Create Client Inside Realm
-> Give Name and Id
-> Give Base path 
-> Create Role inside it
-> Create Users From UI 
-> Add Credentials and Set Password and Assign Roles
-> Define Roles Allowed in the Resource class
-> Add quarkus-oidc dependency and quarkus-keycloak-authorization in pom.xml
-> Define Properties in application.properties
-> In PostMan go to Authorization -> Oauth2.o , Give all the details and then copy the token.
-> Select Bearer Token then paste the token and try to access the URL. It will work


To implement Lombok in Application:
------------------------------------
-> Do not apply @Data in any Entity class , Apply it on DTO Class only.
-> Add Lombok dependency in pom.xml
-> We can now use @Getter/@Setter/ and many more


To Test Secured API:
-------------------------
-> Suppose we have JWT Implemented and we have @RolesAllowed in every end point
-> Add quarkus-test-security in pom to bypass authorization.
-> We can bypass by 2 ways:
	-> By annotating @TestSecurity(authorizationEnabled = false) at method level in test class
	-> By annotating @TestSecurity(user = "testUser", roles = "teacher") defining roles for that method.
	

